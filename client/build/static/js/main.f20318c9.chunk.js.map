{"version":3,"sources":["actions/LoginAction.js","components/Navbar.jsx","styles/styles.js","components/Home.jsx","components/LoginResult.jsx","components/Dashboard.jsx","components/EntryEditor.jsx","templates/introduction/IntroTemplateMinimalist.jsx","templates/timeline/TimelineTemplateMinimalist.jsx","components/EntryGenerator.jsx","components/Portfolio.jsx","components/Publish.jsx","reducers/LoginReducer.js","reducers/PortfolioReducer.js","reducers/RootReducer.js","reportWebVitals.js","index.js","actions/PortfolioAction.js"],"names":["LOG_IN_USER","LOG_OUT_USER","REPOPULATE_STATE","repopulate_state","res","type","payload","Navbar","handleLogout","bind","handleUserMenu","state","menu_open","user_drawer_open","this","props","loggedIn","localStorageItem","JSON","parse","window","localStorage","getItem","process","console","log","log_out_user","removeItem","axios","method","url","withCredentials","then","location","pathname","catch","err","message","setState","name","avatar_url","id","error","gravatar_id","classes","className","root","CssBaseline","AppBar","position","appBar","appBarShift","toolbar","IconButton","homeButton","Typography","component","variant","color","noWrap","title","Button","startIcon","Avatar","src","onClick","hide","Drawer","anchor","onBackdropClick","paper","drawerPaper","drawerPaperClose","open","drawerDiv","Hidden","xsDown","expandedAvatar","Divider","List","flexDown","fullWidth","Component","mapDispatchToProps","connect","login","withStyles","theme","display","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginRight","spacing","width","enteringScreen","homeButtonHidden","flexGrow","textAlign","height","whiteSpace","overflowX","breakpoints","up","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","flexDirection","fixedHeight","marginTop","marginLeft","maxWidthButton","borderRadius","maxHeight","createMuiTheme","palette","primary","light","main","dark","secondary","text","typography","fontFamily","join","featureImage","featureTitle","featureText","Home","handleFeatureClick","handleFeatureNext","handleFeaturePrev","featureIndex","newIndex","welcomeDiv","centeredDiv","portfolioIcon","alt","multiline","to","href","featuresDiv","floating","featureButtonLeft","featureImgDiv","fullSize","featureSection","featureTextDiv","featureButtonRight","faqDiv","ListItem","backgroundImage","backgroundRepeat","backgroundSize","welcomeText","top","right","left","LoginResult","search","ghCode","URLSearchParams","get","responseType","data","code","forLocalStorage","setItem","stringify","fetchPortfolios","log_in_user","Dashboard","e","portfolios","Grid","gridHorizontal","map","element","idx","portfolioButton","openTemplateEditor","checkCookie","testPublish","direction","justify","margin","size","EntryEditor","fields","handleCreateEntry","handleChange","handleImageUpload","handleEditSectionText","event","category","target","value","originalCat","index","spliced","sections","filter","item","filterIndex","copy","info","defaultEntry","newSections","texts","Modal","modal","onClose","aria-labelledby","aria-describedby","sectionDiv","categoryDiv","TextField","label","onChange","Object","entries","fonts","key","colours","images","imgPreview","enabled","entryDiv","entryObj","handleDeleteSection","imgDiv","entryFormat","textDiv","rowsMax","backgroundColor","opacity","bottom","div","IntroTemplateMinimalist","style","bg","titleFont","status","dp","templateName","allowColour","defaultField","std","TimelineTemplateMinimalist","section","timelineImage","timelineImg","timelineDate","timelineTitle","templates","introduction","script","timeline","Portfolio","editMode","pages","directory","currentPage","currentEntry","showEditor","createEntry","handleEditorClose","handleCreateFile","handleProduction","entryFields","entryType","fieldsCopy","newEntry","newPages","changed","sheets","ServerStyleSheets","rawHTML","ReactDOMServer","renderToString","collect","entry","renderEntry","html","Base64","encode","css","toString","js","Boolean","file","contents","resArray","page","fileArray","undefined","Fab","editFAB","staticDiv","controlFAB","marginBottom","Publish","finalizeDialogState","overrideDialogState","repositoryName","repositoryContent","anchorEl","fileName","fileContent","handleOnChange","handleAddFileContent","handleAddToFileContent","handleFinalizeDialogOpen","handleFinalizeDialogClose","handleOverrideDialogOpen","handleOverrideDialogClose","handleAnchorMenu","handleReleaseMenu","handleFinalizeEdits","handleOverrideAllowed","handlePushToGithub","preventDefault","temp","duplicate","obj","push","files","currentTarget","getAttribute","a","route","repo","response","params","componentname","aria-label","aria-controls","aria-haspopup","actionFAB","Menu","keepMounted","MenuItem","Dialog","DialogTitle","DialogContent","DialogContentText","autoFocus","defaultValue","for","placeholder","DialogActions","modeFAB","GUEST","initialState","MISSING","loading","currentWork","combineReducers","action","FETCH_PORTFOLIOS_BEGIN","FETCH_PORTFOLIOS_SUCCESS","FETCH_PORTFOLIOS_FAILURE","SAVE_CURRENT_WORK","curr","CLEAR_CURRENT_WORK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","ThemeProvider","exact","path","document","getElementById","dispatch","REACT_APP_REACT_APP_BACKEND","fetchPortfoliosFailure"],"mappings":"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","file":"static/js/main.f20318c9.chunk.js","sourcesContent":["/**\n * LoginAction exports actions and their respective action creators.\n * \n * @module LoginAction\n * @author Chen En\n * @category Action\n */\n\n/**\n * string that identifies a LOG_IN_USER action.\n * \n * @type {string}\n * @member LOG_IN_USER\n */\nexport const LOG_IN_USER = \"LOG_IN_USER\"\n\n/**\n * string that identifies a LOG_OUT_USER action.\n * \n * @type {string}\n * @member LOG_OUT_USER\n */\nexport const LOG_OUT_USER = \"LOG_OUT_USER\"\n\n/**\n * string that identifies a REPOPULATE_STATE action.\n * \n * @type {string}\n * @member REPOPULATE_STATE\n */\nexport const REPOPULATE_STATE = \"REPOPULATE_STATE\"\n\n/**\n * LOG_IN_USER action creator. This action saves user details contained in res to Redux Store and\n * sets boolean loggedIn in Redux Store to true.\n * \n * @param {Object} res - response object containing Github user details.\n * @returns {{type: string, payload: Object}} - LOG_IN_USER action object.\n * @member log_in_user\n * @function\n */\nexport const log_in_user = res => ({\n    type: LOG_IN_USER,\n    payload: { ...res }\n})\n\n/**\n * LOG_OUT_USER action creator. This action removes user details contained in Redux Store and\n * sets boolean loggedIn in Redux Store to false.\n * \n * @returns {{type: string}} - LOG_OUT_USER action object.\n * @member log_out_user\n * @function\n */\nexport const log_out_user = () => ({\n    type: LOG_OUT_USER\n})\n\n/**\n * REPOPULATE_STATE action creator. This action saves user details and user logged in status\n * contained in res to Redux Store.\n * \n * @param {Object} res - response object containing Github user details\n * @returns {{type: string, payload: Object}} - REPOPULATE_STATE action object.\n * @member repopulate_state\n * @function\n */\nexport const repopulate_state = res => ({\n    type: REPOPULATE_STATE,\n    payload: { ...res }\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { log_out_user, repopulate_state } from '../actions/LoginAction';\nimport axios from 'axios';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { Avatar, Button, Divider, Drawer, Hidden, IconButton } from '@material-ui/core';\n\n/**\n * @file Home component serves as a welcome page to users and provides functionalities that allow\n * user's to login via Github Oauth.\n * \n * @author Chuan Hao\n * \n * @see Navbar\n */\n\n// TODO: clean up unused styles\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof Navbar\n * @param {Object} theme \n */\nconst styles = (theme) => ({\n    root: {\n      display: 'flex',\n    },\n    toolbar: {\n      paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginRight: theme.spacing(30),\n      width: `calc(100% - ${theme.spacing(30)})`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    homeButton: {\n      marginRight: 'auto',\n    },\n    homeButtonHidden: {\n      display: 'none',\n    },\n    title: {\n      flexGrow: 1,\n    },\n    drawerDiv: {\n        display: 'block',\n        justifyContent: 'center',\n        textAlign: 'center',\n        height: '100vh',\n    },\n    drawerPaper: {\n      whiteSpace: 'nowrap',\n      width: theme.spacing(30),\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerPaperClose: {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(0),\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(0),\n      },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: '100vh',\n      overflow: 'auto',\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    fixedHeight: {\n      height: 240,\n    },\n    hide: {\n        display: 'none'\n    },\n    expandedAvatar: {\n        marginTop: theme.spacing(5),\n        height: theme.spacing(20),\n        width: theme.spacing(20),\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n    maxWidthButton: {\n        width: '100%',\n        borderRadius: '0px'\n    },\n    maxHeight: {\n        height: '100%',\n    },\n    flexDown: {\n      display: 'flex',\n      flexDirection: 'column',\n    }\n});\n\n\n/**\n * Navbar component for page navigation.\n * \n * @author Chen En\n * @author Chuan Hao\n * \n * @component\n */\nclass Navbar extends Component {\n    /**\n     * @constructor\n     * fixes default fields in state\n     */\n    constructor() {\n        super();\n        this.handleLogout = this.handleLogout.bind(this);\n        this.handleUserMenu = this.handleUserMenu.bind(this);\n        this.state = {\n            menu_open: false,\n            user_drawer_open: false\n        }\n    }\n\n    /**\n     * Attempts to fetch user info to display in the component.\n     * \n     * @return void\n     * @memberof Navbar\n     */\n    componentDidMount() {\n      if (!this.props.loggedIn) {\n        const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE))\n        this.props.repopulate_state(localStorageItem)\n      }\n    }\n    \n    /**\n     * Logout function to clear cookies and invalidate the github authorization.\n     * \n     * @return void\n     * @memberof Navbar\n     */\n    handleLogout() {\n        console.log(\"logging out\")\n        this.props.log_out_user()\n        localStorage.removeItem(process.env.REACT_APP_USER_LOCALSTORAGE)\n        console.log(\"successfully cleared localStorage\")\n        axios({\n            method: 'GET',\n            url: process.env.REACT_APP_BACKEND + '/logout',\n            withCredentials: true\n        }).then(res => {\n            window.location.pathname = '/'\n        }).catch(err => {\n            console.log(err.message)\n        })\n    }\n\n    /**\n     * Logout function to clear cookies and invalidate the github authorization.\n     * \n     * @return void\n     * @memberof Navbar\n     */\n    handleUserMenu() {\n        console.log(this.state.user_drawer_open);\n        this.setState({user_drawer_open: !this.state.user_drawer_open});\n    }\n\n    render() {\n        const { loggedIn, name, id, avatar_url, gravatar_id, error } = this.props\n        \n        if (error) {\n            return <div>Error! {error.message}</div>\n        }\n        \n        const { classes } = this.props;\n\n        // CssBaseline gets the default body style and applies it (background colour etc.)\n        return (\n            <div className = {classes.root}>\n                <CssBaseline />\n                <AppBar position=\"absolute\" \n                className={this.state.user_drawer_open \n                    ? `${classes.appBar} ${classes.appBarShift}` \n                    : classes.appBar}>\n                    <ToolBar className={classes.toolbar}>\n                        <IconButton className={classes.homeButton}>\n                          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                              Portfol.io\n                          </Typography>\n                        </IconButton>\n                        <Button startIcon={<Avatar src={avatar_url}/>} \n                        onClick={this.handleUserMenu} \n                        className={loggedIn && !this.state.user_drawer_open ? \"\" : classes.hide }>\n                            {name}\n                        </Button>\n                    </ToolBar>\n                </AppBar>\n                <Drawer \n                    variant=\"temporary\"\n                    anchor=\"right\"  \n                    onBackdropClick={this.handleUserMenu}\n                    classes={{\n                        paper: this.state.user_drawer_open \n                        ? classes.drawerPaper \n                        : `${classes.drawerPaper} ${classes.drawerPaperClose}`\n                    }}\n                    open={this.state.user_drawer_open}\n                >\n                    <div className={classes.drawerDiv}>\n                        <Hidden xsDown>\n                            <Avatar src={avatar_url} className={classes.expandedAvatar}/>\n                        </Hidden>\n                        <Typography variant=\"h4\" className={classes.title}>\n                            {name}\n                        </Typography>\n                        <Divider/>\n                          <List className={classes.flexDown}>\n                            <Button color=\"primary\" fullWidth={true} >\n                                PLACEHOLDER\n                            </Button>\n                            <Button onClick={this.handleLogout} fullWidth={true} color=\"secondary\" >\n                                LOGOUT\n                            </Button>\n                        </List>\n                    </div>\n                </Drawer>\n            </div>\n        )\n    }\n}\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof EntryEditor\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn,\n    name: state.login.name,\n    id: state.login.id,\n    avatar_url: state.login.avatar_url,\n    gravatar_id: state.login.gravatar_id,\n    error: state.login.error\n})\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof EntryEditor\n */\nconst mapDispatchToProps = {\n  log_out_user,\n  repopulate_state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Navbar))\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n//visit here to see what to override \n//https://material-ui.com/customization/default-theme/\nexport const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n      primary: {\n        light: '#FF0000',\n        main: '#88FF00',\n        dark: '#330088'\n      },\n      secondary: {\n        light: '#00FF00',\n        main: '#0088FF',\n        dark: '#553300'\n      },\n      text: {\n        primary: 'rgba(255, 255, 255, 0.87)',\n        secondary: 'rgba(0, 0, 0, 0.87)'\n      }\n    },\n    typography: {\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto'\n      ].join(',')\n    }\n  })\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { repopulate_state } from '../actions/LoginAction'\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Avatar, Button, Divider, Drawer, Hidden, IconButton, List, ListItem } from '@material-ui/core';\nimport { theme } from '../styles/styles';\n\n\n/**\n * @file Home component serves as a welcome page to users and provides functionalities that allow\n * user's to login via Github Oauth.\n * \n * @author Chuan Hao\n * \n * @see Home\n */\n\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof Home\n * @param {Object} theme \n */\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n    },\n    centeredDiv: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    welcomeDiv: {\n        width: '100%',\n        height: '100vh',\n        backgroundImage: `url(\"${\"https://miro.medium.com/max/1100/1*OlgqUIhvl5-9dZISlZ2-yQ.jpeg\"}\")`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n    },\n    welcomeText: {\n        flexGrow: 1,\n\n    },\n    multiline: {\n        whiteSpace: 'pre-line',\n    },\n    portfolioIcon: {\n        width: '40vh',\n        height: '40vh',\n        borderRadius: '20vh',\n    },\n    featuresDiv: {\n        position: 'relative',\n        width: '100%',\n        height: '60vh',\n        flexDirection: 'row',\n    },\n    featureTextDiv: {\n        position: 'absolute',\n        top: 0,\n        right : 0,\n        width: '55vw',\n        height: '100%',\n        padding: '10%',\n    },\n    featureImgDiv: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '45vw',\n        height: '100%'\n    },\n    fullSize: {\n        width: '100%',\n        height: '100%',\n    },\n    floating: {\n        zIndex: 1,\n    },\n    featureButtonLeft: {\n        height: '100%',\n        position: 'absolute',\n        left: 0,\n    },\n    featureButtonRight: {\n        height: '100%',\n        position: 'absolute',\n        right: 0,\n    }\n});\n\n/** \n * Integer representing size of feature elements.\n * \n * @type {number} \n * @memberof Home\n */\nconst featureMaxIndex = 2;\n\n/** \n * Array of strings containing links/paths to images to be used in the features section.\n * \n * @type {Array.<string>} \n * @memberof Home\n */\nconst featureImage = [\n    'https://media.edutopia.org/styles/responsive_2000px_original/s3/masters/d7_images/cover_media/robinson-169hero-portfolio-shutterstock.jpg', \n    'https://assets-global.website-files.com/6009ec8cda7f305645c9d91b/603823eca4b46344229b30f8_portfolio_course.png', \n    'https://cdn-japantimes.com/wp-content/uploads/2020/06/np_file_16250.jpeg'\n];\n\n/** \n * Array of strings representing feature titles.\n * \n * @type {Array.<string>} \n * @memberof Home\n */\nconst featureTitle = [\n    'Your Design. Your Website.',\n    'Visualize your personality',\n    'Stay Ahead'\n];\n\n/** \n * Array of strings representing feature texts.\n * \n * @type {Array.<string>} \n * @memberof Home\n */\nconst featureText=[\n    'No watermarks, no restrictions — you own your website',\n    'Choose your style',\n    'Stay Relevant'\n];\n\n/** \n * Array of FAQ's represented as strings.\n * \n * @type {Array.<string>} \n * @memberof Home\n */\nconst faqQuestions=['FAQ1?', 'FAQ2?', 'FAQ3?'];\n\n/** \n * Array of FAQ answers corresponding to the questions represented as strings.\n * \n * @type {Array.<string>} \n * @memberof Home\n */\nconst faqAnswers=['yes\\nof\\ncourse', 'no', 'yes' ];\n\n/**\n * Home component of Portfolio.\n * \n * @author Chen En\n * @author Chuan Hao\n * \n * @component\n */\nclass Home extends Component {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.handleFeatureClick = this.handleFeatureClick.bind(this);\n        this.handleFeatureNext = this.handleFeatureNext.bind(this);\n        this.handleFeaturePrev = this.handleFeaturePrev.bind(this);\n\n        /**\n         * @typedef {Object} state\n         * @property {number} featureIndex - index of feature elements to be rendered.\n         * @property {number} featureTitle - string representing feature title.\n         * @property {string} featureText - string representing feature text.\n         * @property {string} featureImage - string representing url of feature image to be rendered.\n         * @memberof Home\n         */\n        this.state = {\n            featureIndex: 0,\n            featureText: featureText[0],\n            featureTitle: featureTitle[0],\n            featureImage: featureImage[0]\n        }\n    }\n\n    /**\n     * Attempts to fetch user details and logged in status from localStorage after component is rendered.\n     * \n     * @returns void\n     * @memberof Home\n     */\n    componentDidMount() {\n        if (!this.props.loggedIn) {\n            const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE))\n            this.props.repopulate_state(localStorageItem)\n        }\n    }\n\n    /**\n     * Changes feature title, text and image in state to be rendered on button click.\n     * \n     * @param {number} newIndex -Index of array elements to be rendered.\n     * @returns void\n     * @memberof Home\n     */\n    handleFeatureClick(newIndex) {\n        this.setState({\n            featureIndex: newIndex,\n            featureTitle: featureTitle[newIndex],\n            featureText: featureText[newIndex],\n            featureImage: featureImage[newIndex]\n        })\n    }\n\n    // TODO: merge handlers\n    /**\n     * Increments featureIndex by 1 or wraps around to 0 if featureIndex is equals to featureMaxIndex before increment.\n     * \n     * @returns void\n     * @memberof Home\n     */\n    handleFeatureNext() {\n        const newIndex = this.state.featureIndex === featureMaxIndex ? 0 : this.state.featureIndex + 1;\n        this.handleFeatureClick(newIndex);\n    }\n\n    /**\n     * Decrements featureIndex by 1 or wraps around to featureMaxIndex if featureIndex is equals to 0 before decrement.\n     * \n     * @returns void\n     * @memberof Home\n     */\n    handleFeaturePrev() {\n        const newIndex = this.state.featureIndex === 0 ? featureMaxIndex : this.state.featureIndex - 1;\n        this.handleFeatureClick(newIndex);\n    }\n\n    render() {\n        const { loggedIn, classes } = this.props;\n        return (\n            <div className = {classes.root}>\n                <CssBaseline/>\n                <div className={`${classes.welcomeDiv} ${classes.centeredDiv}`}>\n                    <img src={'https://blog.corp-site.envato.com/cdn-cgi/image/width=1200,quality=95,format=auto/uploads/2020/06/SOC101_Portfolio_Guide.png'} \n                    className={classes.portfolioIcon} alt={'Portfol.io icon'}></img>\n                    <Typography component=\"h1\" variant=\"h2\" color=\"inherit\" noWrap className={classes.title}>\n                        Welcome to Portfol.io\n                    </Typography>\n                    {/* must use \\n to make multiline */}\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" className={classes.multiline}>\n                        {\"Where dreams\\nturn\\ninto reality\"}\n                    </Typography>\n                    {loggedIn \n                        ?\n                        <Link to = '/dashboard'>You're logged in already! Lets go to dashboard</Link>\n                        :\n                        <Button \n                            href={`https://github.com/login/oauth/authorize?scope=repo&client_id=` + process.env.REACT_APP_CLIENT_ID} \n                            color=\"primary\" \n                            variant=\"contained\"\n                        >\n                            Login with Github\n                        </Button>\n                    }\n                    \n                </div>\n                <div className={`${classes.featuresDiv} ${classes.centeredDiv}`}>\n                    <Button onClick={this.handleFeaturePrev} className={`${classes.floating} ${classes.featureButtonLeft}`}>\n                        <FaChevronLeft/>\n                    </Button>\n                    <div className={classes.featureImgDiv}>\n                        <img src={this.state.featureImage} className={classes.fullSize} alt={`feature ${this.state.featureSection}`}></img>\n                    </div>\n                    <div className={`${classes.featureTextDiv} ${classes.centeredDiv}`}>\n                        <Typography component=\"h2\" variant=\"h2\" color=\"inherit\" noWrap className={classes.title}>\n                            {this.state.featureTitle}\n                        </Typography>\n                        <Typography component=\"h6\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                            {this.state.featureText}\n                        </Typography>\n                    </div>\n                    <Button onClick={this.handleFeatureNext} className={`${classes.floating} ${classes.featureButtonRight}`}>\n                        <FaChevronRight/>\n                    </Button>\n                </div>\n                <div className={`${classes.faqDiv} ${classes.centeredDiv}`}>\n                    <List>\n                        <ListItem>\n                            {/*  */}\n                        </ListItem>\n                    </List>\n                </div>\n            </div>\n        )\n    }\n}\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof Home\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn,\n    name: state.login.name,\n    id: state.login.id,\n    avatar_url: state.login.avatar_url,\n    gravatar_id: state.login.gravatar_id,\n    error: state.login.error\n})\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof Home\n */\nconst mapDispatchToProps = {\n    repopulate_state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Home));\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { log_in_user, repopulate_state } from '../actions/LoginAction';\nimport { fetchPortfolios } from '../actions/PortfolioAction';\nimport { withStyles } from '@material-ui/core/styles';\nimport { BeatLoader } from 'react-spinners';\n/**\n * @file LoginResult component serves as the endpoint of Github authorization request and also\n * provides visual loading display when Github authorization is in progress.\n * \n * @author Chen En\n * @author Chuan Hao\n * \n * @see LoginResult\n */\n\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof LoginResult\n * @param {Object} theme \n */\n const styles = (theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'start',\n        alignItems: 'center'\n    },\n    appBarSpacer: theme.mixins.toolbar\n});\n\n/**\n * Component that displays loading animation while Github authentication occurs.\n * \n * @author Chen En\n * @author Chuan Hao\n * \n * @component\n */\nclass LoginResult extends Component {\n    \n    /**\n     * If user is logged in already, the user will be redirected to Dashboard. \n     * \n     * Otherwise, an attempt will be made to fetch user details and logged in status from localStorage after component is rendered.\n     * \n     * If user's logged in status is Undefined, an attempt will be made to authenticate the user. Otherwise, he will\n     * also be redirected to Dashboard.\n     *\n     * @return void\n     * @memberof LoginResult\n     */\n    componentDidMount() {\n\n        //If user is not loggedIn already\n        if (!this.props.loggedIn) {\n            //Check if loggedIn user might have accidentally refreshed into this url\n            const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE))\n            //If localStorage returns null, user is not loggedIn, proceed to login\n            if (localStorageItem == null) {\n                let search = window.location.search;\n                let params = new URLSearchParams(search);\n                let ghCode = params.get('code');\n\n                if (ghCode !== \"\") {\n                    axios({\n                        method: \"POST\",\n                        url: `${process.env.REACT_APP_BACKEND}/login/authenticate`,\n                        withCredentials: true,\n                        responseType: 'json',\n                        data: {\n                            code: ghCode\n                        }\n                    }).then(res => res.data)\n                    .then(data => {\n                        /** For setting to localStorage, chose not to just dump entire redux state here because\n                         * we may want to only save certain data to localStorage\n                         */\n                        const forLocalStorage = {\n                            loggedIn: true,\n                            name: data.name,\n                            id: data.id,\n                            avatar_url: data.avatar_url,\n                            gravatar_id: data.gravatar_id\n                        }\n                        window.localStorage.setItem(process.env.REACT_APP_USER_LOCALSTORAGE, JSON.stringify(forLocalStorage))\n                        /**TODO: Implement IDEA => need to create a route that fetches user's portfolios' names and images only. We store this\n                         * in localStorage just like we did user peripherals.\n                         * In the dashboard, only when we click on the portfolio to be worked on. Then we fetch the actual portfolios themselves,\n                         * In the template editor, when the user is working on the portfolio, we will save his current work to localStorage in intervals\n                         * \n                         * When user leaves the template editor, we save his current work to the mongodb database,\n                         * then wipe the localStorage of the current portfolio's work.\n                         */\n                        this.props.fetchPortfolios(data.id)\n                        this.props.log_in_user(data)\n                    }).catch(err => {\n                        console.log(err.message);\n                    })\n                } else {\n                    console.log(\"gh code missing\");\n                }\n            } else { //If localStorage does return an item, then user is already logged in\n                this.props.repopulate_state(localStorageItem)\n            }\n        }\n        \n    }\n\n    render() {\n        const { loggedIn, classes } = this.props\n        if (loggedIn) {\n            return (\n                <Redirect to = '/dashboard'></Redirect>\n            )\n        } else {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.appBarSpacer}/>\n                    <BeatLoader></BeatLoader>\n                </div>\n            )\n        }\n        \n    }\n}\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof LoginResult\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn\n})\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof LoginResult\n */\nconst mapDispatchToProps = {\n    log_in_user,\n    repopulate_state,\n    fetchPortfolios\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LoginResult))","import React, {Component} from 'react';\nimport axios from 'axios';\nimport {connect} from 'react-redux';\nimport {repopulate_state} from '../actions/LoginAction';\nimport {withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n\n/**\n * @file Dashboard component displays previews of the user's portfolios and offers \n * functionalities that allow creation of new user portfolios.\n * \n * @author Chen En\n * @author Chuan Hao\n * \n * @see Dashboard\n */\n\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof Dashboard\n * @param {Object} theme \n */\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'start',\n        alignItems: 'center'\n    },\n    gridHorizontal: {\n        container: true,\n        direction: 'row',\n        justify: 'space-evenly',\n        alignItems: 'center',\n    },\n    portfolioButton: {\n        margin: theme.spacing(1),\n        variant: 'contained',\n        size: 'large',\n        color: 'primary'\n    },\n    appBarSpacer: theme.mixins.toolbar\n});\n\n/**\n * The dashboard logged in users will use to navigate the page\n * \n * @component\n */\nclass Dashboard extends Component {\n    /**\n     * Attempts to fetch user details and logged in status from localStorage after component is rendered.\n     * \n     * @return void\n     * @memberof Dashboard\n     */\n    componentDidMount() {\n        if (!this.props.loggedIn) {\n            const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE));\n            this.props.repopulate_state(localStorageItem);\n        }\n    }\n\n    /**\n     * Testing purposes only\n     * \n     * @param {*} e unused\n     * @ignore\n     */\n    checkCookie(e) {\n        console.log('testing cookie')\n        axios({\n            method: \"GET\",\n            url: process.env.REACT_APP_BACKEND + '/portfolio/status',\n            withCredentials: true\n        }).then(res => {\n            console.log(\"authorized\")\n            console.log(res.data)\n        });\n    }\n\n    /**\n     * Testing purposes only. Changes route to /publish.\n     *\n     * @return void\n     * @memberof Dashboard\n     */\n    testPublish() {\n        window.location.pathname = '/publish'\n    }\n\n    render() {\n        const {loggedIn, name, portfolios, classes } = this.props\n        return (\n            <div className={classes.root}>\n                <div className={classes.appBarSpacer}/>\n                <Typography variant=\"h2\" component=\"h3\">Here is your dashboard {name}!</Typography>\n                <Grid className={classes.gridHorizontal}>\n                    {portfolios.map((element, idx) => {\n                        return (<Button key={idx} className={classes.portfolioButton}>\n                            {element.title}\n                        </Button>);\n                    })}\n                    <Button onClick={this.openTemplateEditor} className={classes.portfolioButton}>Add a Portfolio</Button>\n                </Grid>\n                <Button onClick={this.checkCookie} className={classes.portfolioButton}>Check Cookie</Button>\n                <Button onClick={this.testPublish} className={classes.portfolioButton}>Test Publish Panel</Button>\n            </div>\n\n        )\n    }\n}\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof Dashboard\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn,\n    name: state.login.name,\n    portfolios: state.portfolios.portfolios\n});\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof Dashboard\n */\nconst mapDispatchToProps = {\n    repopulate_state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Dashboard));\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { repopulate_state } from '../actions/LoginAction'\nimport axios from 'axios'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Button, IconButton, TextField, Typography, CssBaseline, Modal, Icon } from '@material-ui/core';\nimport { FaPlus, FaTrashAlt } from \"react-icons/fa\";\n\n\n/**\n * @file EntryEditor component to provide a user interface for users to style their entries\n * \n * @author Chuan Hao\n * \n * @see EntryEditor\n */\n\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof EntryEditor\n * @param {Object} theme \n */\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '5%',\n        textAlign: 'center',\n        backgroundColor: '#444444',\n        opacity: '90%'\n    },\n    modal: {\n      overflow: 'scroll',\n      display: 'flex',\n      flexDirection: 'column',\n      padding: '5%',\n    },\n    floating: {\n        margin: 0,\n        top: 'auto',\n        left: 'auto',\n        bottom: '8%',\n        right: '5%',\n        position: 'fixed',\n        textAlign: 'center'\n    },\n    categoryDiv: {\n      margin: '1vw'\n    },\n    imgPreview: {\n      width: '5vw',\n      height: '5vw'\n    },\n    sectionDiv: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    div: {\n      padding: '10px'\n    }\n})\n\n/**\n * The dashboard logged in users will use to navigate the page.\n * \n * @component\n * @example\n * const fields = {\n *   width: \"50%\", \n *   height: \"50%\", \n *   fonts: {titleFont: \"title font\"},\n *   colours: {primary: \"#FF0000\", secondary: \"#FFFF00\"},\n *   images: {dp: \"\",bg: \"\"},\n *   texts: {name: \"\",status: \"\"},\n *   sections: []\n * }\n * const info = {\n *   fonts: {titleFont: {label: \"title font\"}},\n *   colours: {primary: {label: \"primary\"},secondary: {label: \"secondary\"}},\n *   images: {dp: {label: \"Your portrait photo\", allowColour: false}, bg: {label: \"Entry background\", allowColour: true}},\n *   texts: {name: {label: \"Your full name\"}, status: {label: \"your current position\"}},\n *   sections: {label: \"Add a work experience\", \n *     entryFormat: { \n *       images: {picture:{label: \"Add a photo\"}}, \n *       texts: {title: {label: \"Add a title\"}, body: {label: \"Describe your experience\"}}\n *     },\n *     defaultEntry: {images: {picture:{value: \"\"}},texts: {title: {value: \"\"},body: {value: \"\"}}},\n *     enabled: true\n *   }\n * }\n * return (<EntryEditor fields={fields} info={info} onChange=true/>)\n */\nclass EntryEditor extends Component {\n    // TODO: check if componenetDidMount can overwrite constructor\n    \n    /**\n     * Populates state with fields passed in as attribute fields.\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.props.fields,\n        }\n        this.handleCreateEntry = this.handleCreateEntry.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleImageUpload = this.handleImageUpload.bind(this);\n        this.handleEditSectionText = this.handleEditSectionText.bind(this);\n    }\n\n    // TODO: elements read from state instead of props\n    // TODO: unbounded mongo models\n    /**\n     * Attempts to fetch entry details where possible so settings are saved.\n     * \n     * @return void\n     * @memberof EntryEditor\n     */\n    componentDidMount() {\n        // is this necessary if template is a widget\n        if (!this.props.loggedIn) {\n            const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE))\n            this.props.repopulate_state(localStorageItem)\n        }\n    }\n\n    /**\n     * Event handler for text fields. \n     * Text fields should be named after their keys in the state.\n     * \n     * @param {*} event \n     * @return void\n     * @memberof EntryEditor\n     */\n    handleChange(event, category) {\n      if (category === \"\") {\n        this.setState({\n          [event.target.name]: event.target.value\n        });\n      } else {\n        const originalCat = {...this.state[category]};\n        originalCat[event.target.name] = event.target.value;\n        this.setState({\n          [category]: originalCat\n        });\n      }\n    }\n\n    // TODO: implement file upload logic. possibly save disk reference/localStorage for efficiency\n    /**\n     * Event handler for text fields. \n     * Text fields should be named after their keys in the state.\n     * \n     * @param {*} event \n     * @return void\n     * @memberof EntryEditor\n     */\n    handleImageUpload(event) {\n        // TODO: Open a upload dialog\n        const img = \"\"\n        this.setState({\n            [event.target.name]: img\n        })\n    }\n\n    /**\n     * Event handler for deletion of sub sections.\n     * \n     * @param {*} event \n     * @param {Number} index - the index of the section to be edited\n     * @return void\n     * @memberof EntryEditor\n     */\n    handleDeleteSection(event, index) {\n      const spliced = this.state.sections.filter((item, filterIndex) => filterIndex !== index);\n      this.setState({\n        sections: spliced\n      })\n    }\n\n    /**\n     * Event handler for entry addition. \n     * Entry will be given default fields specified in the info attribute.\n     * \n     * @return void\n     * @memberof EntryEditor\n     */\n    handleCreateEntry() {\n      // JSON used for deep copy\n      const copy = JSON.parse(JSON.stringify(this.props.info.sections.defaultEntry));\n      this.setState({sections: [...this.state.sections, copy]});\n    }\n\n    /**\n     * Event handler for editing sub sections.\n     * \n     * @param {*} event\n     * @param {Number} index - the index of the section to be edited\n     * @return void\n     * @memberof EntryEditor\n     */\n    handleEditSectionText(event, index) {\n      const newSections = [...this.state.sections];\n      newSections[index].texts[event.target.name] = event.target.value;\n      this.setState({\n        sections: newSections\n      });\n    }\n\n    render() {\n        const { classes } = this.props;\n        // TODO: change name/id to field-name-id to avoid collision i.e. colours-primary-0\n        return (\n            <Modal className = {classes.modal}\n            // open always set to true, open/close logic handled by portfolio\n              open={true}\n              // TODO: add onClose save logic\n              onClose={() => this.props.onClose(this.state, true)}\n              aria-labelledby=\"Entry editor\"\n              aria-describedby=\"Edit your entry fields here\"\n            >\n              <div className={classes.root}>\n                <Typography component=\"h3\" variant=\"h3\">Entry editor</Typography>\n                <div className={classes.sectionDiv}>\n                  <div className={classes.categoryDiv}>\n                    <TextField \n                      id=\"width\"\n                      label=\"width\"\n                      name=\"width\"\n                      value={this.state.width}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      onChange={(event) => this.handleChange(event, \"\")}\n                      />\n                    <TextField \n                      id=\"height\"\n                      label=\"height\"\n                      name=\"height\"\n                      value={this.state.height}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      onChange={(event) => this.handleChange(event, \"\")}\n                      />\n                  </div>\n                  <div className={classes.categoryDiv}>\n                    {Object.entries(this.state.fonts).map(([key, item]) => {\n                      return (<TextField\n                        name={key}\n                        id={key}\n                        label={this.props.info.fonts[key].label}\n                        value={item}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={(event) => this.handleChange(event, \"fonts\")}/>)\n                    })}\n                  </div>\n                  <div className={classes.categoryDiv}>\n                    {Object.entries(this.state.colours).map(([key, item]) => {\n                      return (\n                        <div>\n                          {/* Preview icon that changes according to selected colour */}\n                          {/* <Button id=\"colourPreview\"/> */}\n                          <TextField\n                            name={key}\n                            id={key}\n                            label={this.props.info.colours[key].label}\n                            value={item}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={(event) => this.handleChange(event, \"colours\")}\n                          />\n                        </div>\n                        )\n                    })}\n                  </div>\n                </div>\n                <div className={classes.sectionDiv}>\n                  <div className={classes.categoryDiv}>\n                    {Object.entries(this.state.images).map(([key, item]) => {\n                      return (\n                        <div>\n                          <Button onClick={this.handleImageUpload}>\n                            <img src={item} className={classes.imgPreview}/>\n                          </Button>\n                          <Typography>\n                            {this.props.info.images[key].label}\n                          </Typography>\n                        </div>\n                        );\n                    })}\n                  </div>\n                  <div className={classes.categoryDiv}>\n                    {Object.entries(this.state.texts).map(([key, item]) => {\n                      return (\n                        <div>\n                          {/* Preview icon that changes according to selected colour */}\n                          {/* <Button id=\"colourPreview\"/> */}\n                          <TextField\n                            name={key}\n                            id={key}\n                            label={this.props.info.texts[key].label}\n                            value={item}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={(event) => this.handleChange(event, \"texts\")}\n                          />\n                        </div>\n                        )\n                    })}\n                  </div>\n                </div>\n                {this.props.info.sections.enabled \n                ? <div className={classes.entryDiv}>\n                  {this.state.sections.map((entryObj, index) => {\n                    return (\n                      <div>\n                        <IconButton onClick={(event) => this.handleDeleteSection(event, index)}><FaTrashAlt/></IconButton>\n                        <div className={classes.imgDiv}>\n                          {Object.entries(entryObj.images).map(([key, item]) => {\n                            return (\n                              <div>\n                                {/* TODO: implement different logic */}\n                                <Button onClick={this.handleImageUpload}>\n                                  <img src={item} className={classes.imgPreview}/>\n                                </Button>\n                                <Typography>\n                                  {this.props.info.sections.entryFormat.images[key].label}\n                                </Typography>\n                              </div>\n                              );\n                          })}\n                        </div>\n                        <div className={classes.textDiv}>\n                          {Object.entries(entryObj.texts).map(([key, item]) => {\n                            console.log(item);\n                            // TODO: make maxRow field in info?\n                            return (\n                              <div>\n                                <TextField\n                                  name={key}\n                                  id={key}\n                                  label={this.props.info.sections.entryFormat.texts[key].label}\n                                  value={item}\n                                  margin=\"normal\"\n                                  variant=\"outlined\"\n                                  onChange={(event) => this.handleEditSectionText(event, index)}\n                                  multiline\n                                  rowsMax={3}\n                                />\n                              </div>\n                              );\n                          })}\n                        </div>\n                      </div>\n                      )\n                  })}\n                  <IconButton onClick={this.handleCreateEntry}><FaPlus/></IconButton>\n                </div>\n                : null}\n              </div>\n            </Modal>\n        )\n      }\n}\n\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof EntryEditor\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn\n})\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof EntryEditor\n */\nconst mapDispatchToProps = {\n    repopulate_state\n}\n\nexport default (withStyles(styles)(EntryEditor))","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  std: {display: 'block'}\n});\n\nclass IntroTemplateMinimalist extends Component {\n  constructor() {\n    super();\n  }\n\n  static templateName = \"Minimalist\";\n\n  static info = {\n    fonts: {titleFont: {label: \"title font\"}},\n    colours: {primary: {label: \"primary\"},secondary: {label: \"secondary\"}},\n    images: {dp: {label: \"Your portrait photo\", allowColour: false}, bg: {label: \"Entry background\", allowColour: true}},\n    texts: {name: {label: \"Your full name\"}, status: {label: \"your current position\"}},\n    sections: {}\n  };\n\n  static defaultField = {\n    width: \"100%\", \n    height: \"80vh\", \n    fonts: {titleFont: \"title font\"},\n    colours: {primary: \"#f2d38a\", secondary: \"#fff8e8\"},\n    images: {dp: \"https://bit.ly/3fRv2Y2\",bg: \"https://bit.ly/3ut83ry\"},\n    texts: {name: \"Jane Doe\",status: \"Web developer\"},\n    sections: []\n  };\n\n  render() {\n    const { classes, fields } = this.props;\n    return (\n      <div className = {classes.root} style={{\n        backgroundRepeat: false,\n        backgroundImage: `url(\"${fields.images.bg}\")`,\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n        width: fields.width,\n        height: fields.height,\n        minHeight: \"1000px\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      }}>\n        <CssBaseline/>\n        <div style={{marginLeft: \"auto\", marginRight: \"10%\"}}>\n          <Typography component=\"h2\" variant=\"h2\" style={{color: fields.colours.secondary, fontFamily: \"Arial, Helvetica, sans-serif\"}}>\n            Hello! my name is\n          </Typography>\n          <Typography component=\"h1\" variant=\"h1\" style={{color: fields.colours.primary, fontFamily: `${fields.fonts.titleFont}, Arial, Helvetica, sans-serif`}}>\n            {fields.texts.name}\n          </Typography>\n          <Typography component=\"h1\" variant=\"h1\" style={{color: fields.colours.secondary, fontFamily: \"Arial, Helvetica, sans-serif\"}}>\n            {fields.texts.status}\n          </Typography>\n        </div>\n        <img src={fields.images.dp} alt=\"my portrait\" style={{height: \"100%\", width: \"auto\", marginRight: \"auto\"}}/>\n      </div>);\n  }\n}\n\nexport default withStyles(styles)(IntroTemplateMinimalist);\n","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  std: {display: 'block'},\n  timelineImg: {\n    borderRadius: '50%',\n    height: '5vw',\n    width: '5vw'\n  }\n});\n\nclass TimelineTemplateMinimalist extends Component {\n  constructor() {\n    super();\n  }\n\n  static templateName = \"Minimalist\";\n\n  static info = {\n    fonts: {titleFont: {label: \"title font\"}},\n    colours: {primary: {label: \"primary\"},secondary: {label: \"secondary\"}},\n    images: { bg: {label: \"Entry background\", allowColour: true}},\n    texts: {title: {label: \"Timeline title\"}},\n    sections: {\n      enabled: true,\n      defaultEntry: {\n        images: {timelineImage: \"https://bit.ly/3c3wsNL\"},\n        texts: {timelineTitle: \"New section\", timelineDate: \"2077\"}\n      },\n      entryFormat: {\n        images: {timelineImage: {label: \"Event Image\", allowColour: true}},\n        texts: {timelineTitle: {label: \"Event name\"}, timelineDate: {label: \"Event date\"}}\n      }\n    }\n  };\n\n  static defaultField = {\n    width: \"100%\", \n    height: \"fit-content\", \n    fonts: {titleFont: \"roboto\"},\n    colours: {primary: \"#ff0000\", secondary: \"#00ff00\"},\n    images: {bg: \"https://bit.ly/3ut83ry\"},\n    texts: {title: \"A stroll through time\"},\n    sections: [{\n      images: {timelineImage: \"https://bit.ly/3hXPM2R\"},\n      texts: {timelineTitle: \"Portfolio Deployed on Github!\", timelineDate: \"2021\"}\n    },\n    {\n      images: {timelineImage: \"https://bit.ly/3c3wsNL\"},\n      texts: {timelineTitle: \"Portfolio added to resume\", timelineDate: \"2022\"}\n    }]\n  };\n\n  render() {\n    const { classes, fields } = this.props;\n    return (\n      <div className = {classes.root} style={{\n        backgroundRepeat: false,\n        backgroundImage: `url(\"${fields.images.bg}\")`,\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n        width: fields.width,\n        height: fields.height,\n        display: \"flex\",\n        flexDirection: \"column\",\n        textAlign: \"center\"\n      }}>\n        <CssBaseline/>\n        <div>\n          <Typography component=\"h2\" variant=\"h2\" style={{color: fields.colours.primary, fontFamily: `${fields.fonts.titleFont}, Helvetica, sans-serif`}}>\n            {fields.texts.title}\n          </Typography>\n          {fields.sections.map((section, index) => {\n            return (\n              <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                <img src={section.images.timelineImage} className={classes.timelineImg}/>\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                  <Typography>{section.texts.timelineDate}</Typography>\n                  <Typography>{section.texts.timelineTitle}</Typography>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <img src={fields.images.dp} alt=\"my portrait\" style={{height: \"100%\", width: \"auto\", marginRight: \"auto\"}}/>\n      </div>);\n  }\n}\n\nexport default withStyles(styles)(TimelineTemplateMinimalist);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport EntryEditor from './EntryEditor';\nimport IntroTemplateMinimalist from '../templates/introduction/IntroTemplateMinimalist';\nimport TimelineTemplateMinimalist from '../templates/timeline//TimelineTemplateMinimalist';\n//  TODO: rename to templates?\n/**\n * @file EntryEditor component to provide a user interface for users to style their entries\n * \n * @author Chuan Hao\n * \n * @see EntryGenerator\n */\nexport const templates = {\n  introduction: [\n    {\n      name: IntroTemplateMinimalist.templateName, \n      component: (fields, id) => (<IntroTemplateMinimalist fields={fields} id={id}/>),\n      script: (index) => \"\",\n      info: IntroTemplateMinimalist.info,\n      defaultField: IntroTemplateMinimalist.defaultField\n    }\n  ],\n  timeline: [\n    {\n      name: TimelineTemplateMinimalist.templateName,\n      component: (fields, id) => (<TimelineTemplateMinimalist fields={fields} id={id}/>),\n      script: (index) => \"\",\n      info: TimelineTemplateMinimalist.info,\n      defaultField: TimelineTemplateMinimalist.defaultField\n    }\n  ]\n}","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {repopulate_state} from '../actions/LoginAction'\nimport {withStyles} from '@material-ui/core/styles'\nimport {Button, Fab, IconButton, TextField, Typography} from '@material-ui/core';\nimport {FaEdit, FaPlus, FaSave} from \"react-icons/fa\";\nimport {Base64} from 'js-base64';\nimport ReactDOMServer from 'react-dom/server';\nimport {ServerStyleSheets, ThemeProvider} from '@material-ui/core/styles'\nimport EntryEditor from './EntryEditor';\nimport {templates} from './EntryGenerator';\n\n\n/**\n * @file Portfolio component representing a user created portfolio\n * \n * @author Chuan Hao\n * \n * @see Portfolio\n */\n\n/**\n * Style generator to dynamically adjust styles based on theme provided\n * \n * @memberof Portfolio\n * @param {Object} theme \n */\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'start',\n        alignItems: 'center',\n        paddingTop: '7%',\n    },\n    entryDiv: {\n        position: 'relative'\n    },\n    editFAB: {\n        position: 'absolute',\n        marginTop: '2vw',\n        marginLeft: '2vw'\n    },\n    controlFAB: {\n        position: 'static',\n        marginRight: '0.5vw',\n        marginBottom: '0.5vw'\n    },\n    staticDiv: {\n        position: 'fixed',\n        bottom: 0,\n        right: 0\n    }\n})\n\n/**\n * The portfolio component used for rendering previews and compiling for publishing.\n * \n * \n * @component\n */\nclass Portfolio extends Component {\n    /**\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            editMode: true,\n            pages: [{\n                directory: \"\",\n                entries: [],\n            }],\n            currentPage: 0,\n            currentEntry: 0,\n            showEditor: false\n        }\n        this.createEntry = this.createEntry.bind(this);\n        this.handleEditorClose = this.handleEditorClose.bind(this);\n        this.handleCreateFile = this.handleCreateFile.bind(this);\n        this.handleProduction = this.handleProduction.bind(this);\n    }\n\n    /**\n     * Function to enter entries based on the entry's type and template style.\n     * \n     * @param {*} entryFields \n     * @param {number} index \n     * @returns void\n     * @memberof Portfolio\n     */\n    renderEntry(entryFields, index) {\n        return templates[entryFields.type][entryFields.style].component(entryFields, index);\n    }\n\n    // TODO: Add logic for a template chooser\n    /**\n     * Function to create a new entry.\n     * \n     * @returns void\n     */\n    createEntry() {\n        const entryType = \"timeline\";\n        const entryStyle = 0;\n        const fieldsCopy = JSON.parse(JSON.stringify(templates[entryType][entryStyle].defaultField))\n        const newEntry = {\n            type: entryType,\n            style: entryStyle,\n            ...fieldsCopy\n        };\n        const newPages = [...this.state.pages];\n        newPages[this.state.currentPage].entries = \n            [...this.state.pages[this.state.currentPage].entries, newEntry];\n        this.setState({pages: newPages});\n    }\n\n    /**\n     * Function to update the entry based on the styles provided by the user.\n     * \n     * @param {*} fields\n     * @param {boolean} changed - Whether the fields have been changed/ if the user intends to save the changes.\n     */\n    handleEditorClose(fields, changed) {\n        if(changed) {\n            console.log(fields);\n            const newPages = [...this.state.pages];\n            const entries = [...this.state.pages[this.state.currentPage].entries];\n            entries[this.state.currentEntry] = fields;\n            newPages[this.state.currentPage].entries = entries;\n            this.setState({\n                showEditor: !this.state.showEditor,\n                pages: newPages\n            })\n        } else {\n            this.setState({\n                showEditor: !this.state.showEditor\n            })\n        }\n    }\n\n    // TODO: publish component check file empty before load?\n    /**\n     * A function to generate the necessary html/css/js files for a single page.\n     * \n     * @param {*} entries \n     * @param {string} directory - The directory/route to the page as defined by the user.\n     * @returns {(Map|Array)} An array of maps containing the relative paths to each file and their contents.\n     * \n     */\n    handleCreateFile(entries, directory) {\n        console.log(entries);\n        const sheets = new ServerStyleSheets();\n        // TODO: test renderToStaticMarkup\n        const rawHTML = ReactDOMServer.renderToString(sheets.collect(\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                {entries.map((entry, index) => this.renderEntry(entry))}\n            </div>),);\n        // TODO: add title\n        const html = Base64.encode(`\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n                <link href=\"styles.css\" rel=\"stylesheet\">\n                <script defer src=\"script.js\"></script>\n                <title>Welcome</title>\n            </head>\n            <body>\n            ${rawHTML}\n            </body>`);\n        const css = Base64.encode(sheets.toString());\n        const js = Base64.encode(entries\n            .map((entry, index) => templates[entry.type][entry.style].script(index))\n            .filter(Boolean).join('\\n'));\n\n        const files = [\n            {\n                file: `${directory}scripts.js`,\n                contents: js\n            },\n            {\n                file: `${directory}index.html`,\n                contents: html\n            },\n            {\n                file: `${directory}styles.css`,\n                contents: css\n            }\n        ]\n        return files;\n    }\n\n    /**\n     * A function to generate all files needed to be pushed to github.\n     * @returns {(Map|Array)} An array of maps each containing the relative paths to each file and their contents.\n     */\n    handleProduction() {\n        let index = 0;\n        const resArray = [];\n        for (const page of this.state.pages) {\n            const fileArray = this.handleCreateFile(page.entries, page.directory);\n            console.log(fileArray);\n            resArray[index] = fileArray[0];\n            resArray[index + 1] = fileArray[1];\n            resArray[index + 2] = fileArray[2];\n            index += 3;\n        }\n        return resArray;\n    }\n\n    render() {\n        const {classes} = this.props;\n        let entry = undefined;\n        if (this.state.pages[this.state.currentPage].entries != []) {\n            entry = this.state.pages[this.state.currentPage].entries[this.state.currentEntry];\n        }\n\n        return (\n        <div style={{display: \"flex\", flexDirection: \"column\"}}>\n            {this.state.pages[this.state.currentPage].entries.map((entry, index) => {\n                return (<div style={{display: \"flex\", flexDirection: \"row\"}}>\n                    <Fab \n                        className={classes.editFAB}\n                        onClick={() => this.setState({currentEntry: index, showEditor: !this.state.showEditor})}>\n                        <FaEdit/>\n                    </Fab>\n                    {this.renderEntry(entry)}\n                </div>);\n            })}\n            {this.state.showEditor && entry != undefined\n                ? <EntryEditor \n                    fields={entry} \n                    info={templates[entry.type][entry.style].info} \n                    onClose={this.handleEditorClose} \n                /> \n                : null}\n            <div className={classes.staticDiv}>\n                <Fab \n                    className={classes.controlFAB}\n                    onClick={this.createEntry}>\n                    <FaPlus/>\n                </Fab>\n                <Fab \n                    className={classes.controlFAB}\n                    onClick={() => console.log(this.handleProduction())}>\n                    <FaSave/>\n                </Fab>\n            </div>\n        </div>);\n    }\n}\n\n/**\n * Function that maps variables from Redux Store to Home component's props.\n *\n * @param {Object} state - Redux Store\n * @memberof EntryEditor\n */\nconst mapStateToProps = state => ({\n    loggedIn: state.login.loggedIn,\n    name: state.login.name\n})\n\n/** \n * Provides action creators to Home component's props.\n * \n * @type {Object.<Function>} \n * @memberof EntryEditor\n */\nconst mapDispatchToProps = {\n    repopulate_state\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Portfolio))","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { repopulate_state } from '../actions/LoginAction'\r\nimport axios from 'axios'\r\nimport { Base64 } from 'js-base64';\r\n\r\n//MUI component imports\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\n/**\r\n * @file Publish component representing user interface for publishing portfolios to ghpages.\r\n * \r\n * @author Chen En\r\n * \r\n * @see Publish\r\n */\r\n\r\n/**\r\n * Style generator to dynamically adjust styles based on theme provided\r\n * \r\n * @memberof Publish\r\n * @param {Object} theme \r\n */\r\nconst styles = (theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'start',\r\n        alignItems: 'center',\r\n        paddingTop: '7%'\r\n    },\r\n    actionFAB: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        left: 'auto',\r\n        bottom: '8%',\r\n        right: '5%',\r\n        position: 'fixed',\r\n        textAlign: 'center'\r\n    },\r\n    modeFAB: {\r\n        margin: 0,\r\n        top: '10%',\r\n        left: 'auto',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        position: 'fixed',\r\n        textAlign: 'center'\r\n    }\r\n})\r\n\r\n/**\r\n * The publish component renders functionalities to allow user to publish their\r\n * portfolio to ghpages.\r\n * \r\n * The component contains state variables repositoryHTML, repositoryCSS, repositoryJS.\r\n * \r\n * @component\r\n */\r\nclass Publish extends Component {\r\n    // static propTypes = {\r\n    //     onPublish: PropTypes.func.isRequired,\r\n    //     fields: PropTypes.shape({\r\n    //         finalizeDialogState: Proptypes.bool,\r\n    //         overwriteDialogState: Proptypes.bool,\r\n    //         entryDisplayIndex: Proptypes.number,\r\n    //         repositoryName: Proptypes.string\r\n    //     })\r\n    // };\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            finalizeDialogState: false,\r\n            overrideDialogState: false,\r\n            repositoryName: \"\",\r\n            repositoryContent: [],\r\n            anchorEl: null,\r\n            fileName: \"\",\r\n            fileContent: \"\"\r\n        }\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleAddFileContent = this.handleAddFileContent.bind(this);\r\n        this.handleAddToFileContent = this.handleAddToFileContent.bind(this);\r\n        this.handleFinalizeDialogOpen = this.handleFinalizeDialogOpen.bind(this);\r\n        this.handleFinalizeDialogClose = this.handleFinalizeDialogClose.bind(this);\r\n        this.handleOverrideDialogOpen = this.handleOverrideDialogOpen.bind(this);\r\n        this.handleOverrideDialogClose = this.handleOverrideDialogClose.bind(this);\r\n        this.handleAnchorMenu = this.handleAnchorMenu.bind(this);\r\n        this.handleReleaseMenu = this.handleReleaseMenu.bind(this);\r\n        this.handleFinalizeEdits = this.handleFinalizeEdits.bind(this);\r\n        this.handleOverrideAllowed = this.handleOverrideAllowed.bind(this);\r\n        this.handlePushToGithub = this.handlePushToGithub.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Attempts to fetch user details and logged in status from localStorage after component is rendered.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    componentDidMount() {\r\n        if (!this.props.loggedIn) {\r\n            const localStorageItem = JSON.parse(window.localStorage.getItem(process.env.REACT_APP_USER_LOCALSTORAGE))\r\n            this.props.repopulate_state(localStorageItem)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles onChange events. Changes a state variable under the name of the event target to value provided by user.\r\n     *\r\n     * @param {Object} event\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleOnChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles addition of files in the form of objects to the state variable repositoryContent. If file to be added\r\n     * share the same name as an existing file in repositoryContent, the fileContent of the exisitng file will be\r\n     * overwritten by the new file's contents.\r\n     *\r\n     * @param {Object} event\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleAddFileContent(event) {\r\n        event.preventDefault();\r\n        const temp = this.state.repositoryContent;\r\n        \r\n        let duplicate = false;\r\n        for (let obj of temp) {\r\n            if (obj.fileName === this.state.fileName) {\r\n                duplicate = true;\r\n                obj.fileContent = this.state.fileContent\r\n                break;\r\n            }\r\n        }\r\n        if (!duplicate) {\r\n            temp.push({\r\n                fileName: this.state.fileName,\r\n                fileContent: Base64.encode(this.state.fileContent)\r\n            });\r\n            this.setState({\r\n                repositoryContent: temp\r\n            })\r\n        } else {\r\n            console.log(\"duplicate file not added\")\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Test function to be passed down as props to child components.\r\n     *\r\n     * @param {Array.<Object>} files\r\n     * @memberof Publish\r\n     */\r\n    handleAddToFileContent(files) {\r\n        const temp = this.state.repositoryContent;\r\n\r\n        for (let file of files) {\r\n            let duplicate = false;\r\n            for (let obj of temp) {\r\n                if (file.name === obj.fileName) {\r\n                    duplicate = true;\r\n                    obj.fileContent = file.contents\r\n                    break;\r\n                }\r\n            }\r\n            if (!duplicate) {\r\n                temp.push({\r\n                    fileName: file.name,\r\n                    fileContent: file.contents\r\n                })\r\n            } else {\r\n                console.log(`duplicate file ${file.name} not added`)\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            repositoryContent: temp\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the opening of finalize dialog by setting state boolean finalizeDialogState to true.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleFinalizeDialogOpen() {\r\n        this.setState({\r\n            anchorEl: null,\r\n            finalizeDialogState: true\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the closing of finalize dialog by setting state boolean finalizeDialogState to false.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleFinalizeDialogClose() {\r\n        this.setState({\r\n            finalizeDialogState: false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the opening of override dialog by setting state boolean overrideDialogState to true.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleOverrideDialogOpen() {\r\n        this.setState({\r\n            overrideDialogState: true\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the closing of override dialog by setting state boolean overrideDialogState to false.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleOverrideDialogClose() {\r\n        this.setState({\r\n            overrideDialogState: false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the expanding of menu by setting state variable with name matching component prop 'componentname' of the component\r\n     * which fired the event to the component itself.\r\n     * Note: Usage of 'componentname' prop to store the name of state variable to be changed via this method.\r\n     * \r\n     * @param {Object} event\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleAnchorMenu(event) {\r\n        const anchorEl = event.currentTarget.getAttribute(\"componentname\")\r\n        //console.log(anchorEl)\r\n        this.setState({\r\n            [anchorEl]: event.currentTarget\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the closing of menu by setting state variable with name matching component prop 'componentname' of the component\r\n     * which fired the event to null.\r\n     *\r\n     * @param {Object} event\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    handleReleaseMenu(event) {\r\n        const anchorEl = event.currentTarget.getAttribute(\"componentname\");\r\n        //console.log(anchorEl)\r\n        this.setState({\r\n            [anchorEl]: null\r\n        })\r\n    }\r\n\r\n    \r\n    /**\r\n     * This handles the event whereby override button in override dialog is clicked. It calls and\r\n     * wait for handlePushToGithub() to complete before closing the override dialog.\r\n     *\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    async handleOverrideAllowed() {\r\n        console.log(`Override permission given to push to ${this.state.repositoryName} and toggle pages for it`)\r\n        await this.handlePushToGithub();\r\n        this.setState({\r\n            overrideDialogState: false\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Sends a PUT request to backend API which will take over and handle the pushing to specified Github\r\n     * repository and its deployment to ghpages if not already done so. \r\n     * \r\n     * The PUT request requires route (The path relative to Github repository root to push to), repo (The\r\n     * name of Github repository to push to) and content (An array of objects representing files to be pushed).\r\n     * \r\n     * For testing purposes, route is fixed to \"\" for now so that pushing will be done to the root of specified \r\n     * Github repository.\r\n     * \r\n     * Note: For files within sub directories, the path can be prepended to the filename like so \"folder/index.html\"\r\n     * \r\n     * Note: This clears out the repositoryContent after the PUT request is completed.\r\n     * \r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    async handlePushToGithub() {\r\n        console.log(`files are being pushed to ${this.state.repositoryName}`)\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: process.env.REACT_APP_BACKEND + \"/portfolio/publishGithub\",\r\n            withCredentials: true,\r\n            data: {\r\n                route: \"\",\r\n                content: this.state.repositoryContent,\r\n                repo: this.state.repositoryName\r\n            }\r\n        }).then(res => {\r\n            console.log(res.data.message);\r\n        }).catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response.data);\r\n            } else {\r\n                console.log(err.message);\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            repositoryContent: [],\r\n            fileName: \"\",\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This handles the event whereby the finalize button in finalize dialog is clicked. A GET request is sent to\r\n     * backend API to check for existing Github repository of specified name under the user's Github account and sends a POST\r\n     * request to create a new Github repository if there are none.\r\n     * \r\n     * If a new repository is created, this then calls and waits for handlePushToGithub() to complete before closing\r\n     * the finalize dialog.\r\n     * \r\n     * If a Github repository exists, this then opens an override dialog to warn and ask user for permission to overwrite the\r\n     * exisiting Github repository's content.\r\n     *\r\n     * @return void\r\n     * @memberof Publish\r\n     */\r\n    async handleFinalizeEdits() {\r\n        console.log(\"chosen repository name is \" + this.state.repositoryName)\r\n        await axios({\r\n            method: \"GET\",\r\n            url: process.env.REACT_APP_BACKEND + \"/portfolio/checkExistingRepos\",\r\n            withCredentials: true,\r\n            params: {\r\n                repo: this.state.repositoryName\r\n            }\r\n        }).then(async res => {\r\n            console.log(res.data.message)\r\n            //waits for repository to be created\r\n            await axios({\r\n                method: \"POST\",\r\n                url: process.env.REACT_APP_BACKEND + \"/portfolio/createRepo\",\r\n                withCredentials: true,\r\n                data: {\r\n                    repo: this.state.repositoryName\r\n                }\r\n            }).then(response => {\r\n                console.log(response.data.message)\r\n            }).catch(err => {\r\n                if (err.response) {\r\n                    console.log(err.response.data);\r\n                } else {\r\n                    console.log(err.message);\r\n                }\r\n            })\r\n\r\n            //Waits for push to go through\r\n            await this.handlePushToGithub();\r\n        }).catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response.data);\r\n            } else {\r\n                console.log(err.message);\r\n            }\r\n            \r\n            this.setState({\r\n                overrideDialogState: true\r\n            })\r\n        })\r\n\r\n        //Intentional: closes finalizeDialog but doesn't remove repository name.\r\n        //TODO: Repository name should not be set in dialog, but in some easily visible spot.\r\n        this.setState({\r\n            finalizeDialogState: false\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Fab\r\n                    componentname=\"anchorEl\"\r\n                    variant = 'extended'\r\n                    size = 'medium'\r\n                    color = 'primary'\r\n                    aria-label = 'publish panel'\r\n                    aria-controls = 'simple-menu'\r\n                    aria-haspopup = 'true'\r\n                    className = {classes.actionFAB}\r\n                    onClick = {this.handleAnchorMenu}\r\n                >\r\n                    <Typography variant = 'button'>Publish</Typography>\r\n                </Fab>\r\n                <Menu\r\n                    componentname=\"anchorEl\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleReleaseMenu}\r\n                >\r\n                    <MenuItem \r\n                        name=\"finalizeDialogState\" \r\n                        onClick={this.handleFinalizeDialogOpen}\r\n                    >\r\n                        Finalize and Push\r\n                    </MenuItem>\r\n                    <MenuItem>Clear Template</MenuItem>\r\n                    <MenuItem>Undo Action</MenuItem>\r\n                    {/* <MenuItem onClick={this.handleChange}>Get Repo Content Testing</MenuItem> */}\r\n                </Menu>\r\n\r\n                <Dialog\r\n                    open = {this.state.finalizeDialogState}\r\n                    onClose = {this.handleFinalizeDialogClose}\r\n                    aria-labelledby = \"repo name input\"\r\n                >\r\n                    <DialogTitle id = \"repo name input\">\r\n                        Repository Name\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText color = 'primary'>\r\n                            Choose a Github repository name to save portfolio edits\r\n                        </DialogContentText>\r\n                        <TextField\r\n                            name=\"repositoryName\"\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Repository Name\"\r\n                            type=\"string\"\r\n                            defaultValue={this.state.repositoryName}\r\n                            fullWidth\r\n                            onChange={this.handleOnChange}\r\n                        />\r\n                        {/* Likely NOT needed for actual publishing. However, here for testing purposes */}\r\n                        <DialogContentText color = 'primary'>\r\n                            Add a file to Push (for testing purposes)\r\n                        </DialogContentText>\r\n                        <form >\r\n                            <label for=\"fileName\">File Name</label>\r\n                            <input type=\"text\" id=\"fileName\" name=\"fileName\" placeholder=\"file name including repository path\" onChange={this.handleOnChange}></input>\r\n                            <br />\r\n                            <label for=\"fileContent\">File Content</label>\r\n                            <input type=\"text\" id=\"fileContent\" name=\"fileContent\" placeholder=\"your file content\" onChange={this.handleOnChange}></input>\r\n                            <br />\r\n                            <button onClick={this.handleAddFileContent}>Add</button>\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick = {this.handleFinalizeDialogClose} color = 'primary'>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick = {this.handleFinalizeEdits} color = 'primary'>\r\n                            Finalize\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    open = {this.state.overrideDialogState}\r\n                    onClose = {this.handleOverrideDialogClose}\r\n                    aria-labelledby = \"override permission input\"\r\n                >\r\n                    <DialogTitle id = \"override permission input\">\r\n                        Warning!\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText color = 'primary'>\r\n                            Repository already exists. This will override data in your existing repository and could lead to possible data loss! Do you still wish to continue?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick = {this.handleOverrideDialogClose} color = 'primary'>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick = {this.handleOverrideAllowed} color = 'primary'>\r\n                            Allow Override\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>          \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Function that maps variables from Redux Store to Home component's props.\r\n *\r\n * @param {Object} state - Redux Store\r\n * @memberof EntryEditor\r\n */\r\nconst mapStateToProps = state => ({\r\n    loggedIn: state.login.loggedIn\r\n})\r\n\r\n/** \r\n * Provides action creators to Home component's props.\r\n * \r\n * @type {Object.<Function>} \r\n * @memberof EntryEditor\r\n */\r\nconst mapDispatchToProps = {\r\n    repopulate_state\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Publish))","/**\n * LoginReducer exports reducers which is a function that determines changes to an application's state.\n * \n * @module LoginReducer\n * @author Chen En\n * @category Reducer\n */\n\nimport { \n    LOG_IN_USER,\n    LOG_OUT_USER,\n    REPOPULATE_STATE\n} from '../actions/LoginAction';\n\n/** \n * string representing guest user.\n * \n * @type {string}\n * @member GUEST\n */\nconst GUEST = \"Guest\"\n\n/** \n * state that the login reducer is initialized with.\n * \n * @typedef initialState\n * @property {boolean} loggedIn - logged in status of user.\n * @property {string} name - Github name of user.\n * @property {string} id - Unique Github id of user.\n * @property {string} avatar_url - url representing image of user's Github avatar\n * @property {string} gravatar_id - url representing user's globally recognized avatar\n * @property {Object} error - error response provided by requests.\n * @member initialState\n */\nconst initialState = {\n    loggedIn: false,\n    name: GUEST,\n    id: '',\n    avatar_url: '',\n    gravatar_id: '',\n    error: null\n}\n\n/**\n * string representing absent user.\n * \n * @type {string}\n * @member MISSING\n */\nexport const MISSING = ''\n\n//TODO handle actions for GUEST\n\n/**\n * A reducer function that maintains and changes the initialState \n * by processing actions dispatched to it.\n * \n * @param {Object} [state=initialState] - initialState is fixed.\n * @param {Object} action - Action object.\n * @return void \n * @member login\n * @function\n */\nexport default function login(state = initialState, action) {\n    switch(action.type) {\n        case LOG_IN_USER:\n            return {\n                ...state,\n                name: action.payload.name,\n                id: action.payload.id,\n                avatar_url: action.payload.avatar_url,\n                gravatar_id: action.payload.gravatar_id,\n                loggedIn: true\n            }\n        case LOG_OUT_USER:\n            return {\n                ...state,\n                name: GUEST,\n                id: MISSING,\n                avatar_url: MISSING,\n                gravatar_id: MISSING,\n                loggedIn: false\n            }\n        case REPOPULATE_STATE:\n            return {\n                ...state,\n                loggedIn: action.payload.loggedIn,\n                name: action.payload.name,\n                id: action.payload.id,\n                avatar_url: action.payload.avatar_url,\n                gravatar_id: action.payload.gravatar_id\n            }\n        default:\n            return state\n    }\n}","/**\n * PortfolioReducer exports reducers which is a function that determines changes to an application's state.\n * \n * @module PortfolioReducer\n * @author Chen En\n * @category Reducer\n */\n\nimport {\n    FETCH_PORTFOLIOS_BEGIN,\n    FETCH_PORTFOLIOS_SUCCESS,\n    FETCH_PORTFOLIOS_FAILURE,\n    SAVE_CURRENT_WORK,\n    CLEAR_CURRENT_WORK\n} from '../actions/PortfolioAction'\n\n/** \n * @typedef initialState\n * @property {Array.<Object>} portfolios - Array containing objects containing details about user portfolios.\n * @property {boolean} loading - boolean indicating loading status\n * @property {Object} error - error object from a failed request\n * @property {Object} currentWork - object containing details about user's current portfolio work.\n * @member initialState\n */\nconst initialState = {\n    portfolios: [],\n    loading: false,\n    error: null,\n    currentWork: null\n}\n\n/**\n * A reducer function that maintains and changes the initialState \n * by processing actions dispatched to it.\n * \n * @param {Object} [state=initialState] - initialState is fixed.\n * @param {Object} action - Action object.\n * @return void \n * @member portfolioReducer\n * @function\n */\nexport default function portfolioReducer(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_PORTFOLIOS_BEGIN:\n            return {\n                ...state,\n                loading: true\n            }\n        case FETCH_PORTFOLIOS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                portfolios: action.payload.portfolios\n            }\n        case FETCH_PORTFOLIOS_FAILURE:\n            //if failure, means user is unauthorized. clear portfolios and current_work\n            return {\n                ...state,\n                loading: false,\n                portfolios: [],\n                currentWork: null,\n                error: action.payload.err\n            }\n        case SAVE_CURRENT_WORK:\n            return {\n                ...state,\n                currentWork: action.payload.curr\n            }\n        case CLEAR_CURRENT_WORK:\n            return {\n                ...state,\n                currentWork: null\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport login from \"./LoginReducer\"\nimport portfolios from \"./PortfolioReducer\"\n\n\n/**\n * @file Combines reducers into one using combineReducers function.\n * \n * @module RootReducer\n * @author Chen En\n * @category Reducer\n */\n\nexport default combineReducers({\n  login,\n  portfolios\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport LoginResult from './components/LoginResult';\nimport Dashboard from './components/Dashboard';\nimport Portfolio from './components/Portfolio';\nimport Publish from './components/Publish';\nimport { createStore, applyMiddleware } from 'redux';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/RootReducer';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from './styles/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\n/**\n * @file index.js is the root file for this Portfol.io app\n * \n * @author Chen En\n * @author Chuan Hao\n */\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\n\nconst portfolioFields = {\n  finalizeDialogState: false,\n  overrideDialogState: false,\n  repositoryName: \"\",\n  repositoryHTML: \"\",\n  repositoryCSS: \"\"\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme = {theme}>\n      <BrowserRouter>\n        <Provider store = {store}>\n          <Switch>\n            <Route exact path = '/' component = {Home}></Route>\n            <>\n              <Navbar/>\n                <Route exact path = '/login/callback' component = {LoginResult}></Route>\n                <Route exact path = '/dashboard' component = {Dashboard}></Route>\n                <Route exact path = '/edit' component = {Portfolio}></Route>\n                <Route exact path = '/publish' component = {Publish}></Route>\n            </>\n          </Switch>\n        </Provider>\n      </BrowserRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/**\n * PortfolioAction exports actions and their respective action creators.\n * \n * @module PortfolioAction\n * @author Chen En\n * @category Action\n */\n\nimport axios from 'axios'\n\n/**\n * string that identifies a FETCH_PORTFOLIOS_BEGIN action\n * \n * @type {string}\n * @member FETCH_PORTFOLIOS_BEGIN\n */\nexport const FETCH_PORTFOLIOS_BEGIN = \"FETCH_PORTFOLIOS_BEGIN\"\n\n/**\n * string that identifies a FETCH_PORTFOLIOS_SUCCESS action\n * \n * @type {string}\n * @member FETCH_PORTFOLIOS_SUCCESS\n */\nexport const FETCH_PORTFOLIOS_SUCCESS = \"FETCH_PORTFOLIOS_SUCCESS\"\n\n/**\n * string that identifies a FETCH_PORTFOLIOS_FAILURE action\n * \n * @type {string}\n * @member FETCH_PORTFOLIOS_FAILURE\n */\nexport const FETCH_PORTFOLIOS_FAILURE = \"FETCH_PORTFOLIOS_FAILURE\"\n\n/**\n * string that identifies a SAVE_CURRENT_WORK action\n * \n * @type {string}\n * @member SAVE_CURRENT_WORK\n */\nexport const SAVE_CURRENT_WORK = \"SAVE_CURRENT_WORK\"\n\n/**\n * string that identifies a CLEAR_CURRENT_WORK action\n * \n * @type {string}\n * @member CLEAR_CURRENT_WORK\n */\nexport const CLEAR_CURRENT_WORK = \"CLEAR_CURRENT_WORK\"\n\n/**\n * SAVE_CURRENT_WORK action creator. This action saves user's current portfolio work\n * to localStorage.\n * \n * @param {Object} curr - object containing user's current portfolio work.\n * @returns {{type: string, payload: Object}} - SAVE_CURRENT_WORK action object.\n * @member saveCurrentWork\n * @function\n */\nexport const saveCurrentWork = curr => ({\n    type: SAVE_CURRENT_WORK,\n    payload: { curr }\n})\n\n/**\n * CLEAR_CURRENT_WORK action creator. This action clears user's current portfolio work\n * from localStorage.\n * \n * @returns {{type: string}} - CLEAR_CURRENT_WORK action object.\n * @member clearCurrentWork\n * @function\n */\nexport const clearCurrentWork = () => ({\n    type: CLEAR_CURRENT_WORK\n})\n\n/**\n * Action creator that returns a function, which is only possible with redux-thunk.\n * \n * The function receives the store's dispatch method, which is then used to dispatch regular\n * synchronous actions inside the function's body once the asynchronous operations have been completed.\n * \n * The function saves user's work to localStorage, then dispatches a SAVE_CURRENT_WORK action object.\n *\n * @param {Object} curr - object containing user's current portfolio work.\n * @return {Function} - a function that receives the store's dispatch method.\n * @member saveCurrentWorkToLocal\n * @function\n * @requires NPM:redux-thunk\n */\nexport async function saveCurrentWorkToLocal(curr) {\n    return dispatch => {\n        window.localStorage.setItem(process.emv.REACT_APP_AUTOSAVE_LOCALSTORAGE, JSON.stringify(curr))\n        dispatch(saveCurrentWork(curr))\n        console.log(\"portfolio work saved temporarily\")\n    }\n}\n\n/**\n * Action creator that returns a function, which is only possible with redux-thunk.\n * \n * The function receives the store's dispatch method, which is then used to dispatch regular\n * synchronous actions inside the function's body once the asynchronous operations have been completed.\n * \n * The function removes user's work from localStorage, then dispatches a CLEAR_CURRENT_WORK action object.\n *\n * @return {Function} - a function that receives the store's dispatch method.\n * @member clearCurrentWorkToLocal\n * @function\n * @requires NPM:redux-thunk\n */\nexport async function clearCurrentWorkFromLocal() {\n    return dispatch => {\n        window.localStorage.removeItem(process.emv.REACT_APP_AUTOSAVE_LOCALSTORAGE)\n        dispatch(clearCurrentWork())\n        console.log(\"portfolio work cleared\")\n    }\n}\n\n/**\n * FETCH_PORTFOLIOS_BEGIN action creator. This action sets boolean loading in Redux Store to true.\n * \n * @returns {{type: string}} - FETCH_PORTFOLIOS_BEGIN action object.\n * @member fetchPortfoliosBegin\n * @function\n */\nexport const fetchPortfoliosBegin = () => ({\n    type: FETCH_PORTFOLIOS_BEGIN\n})\n\n/**\n * FETCH_PORTFOLIOS_SUCCESS action creator. This action sets boolean loading in Redux Store to false.\n * Then saves the user's portfolios fetched from mongoDB to Redux Store.\n * \n * @param {Object} portfolios - response object containing user's portfolios.\n * @returns {{type: string, payload: Object}} - FETCH_PORTFOLIOS_SUCCESS action object.\n * @member fetchPortfoliosSuccess\n * @function\n */\nexport const fetchPortfoliosSuccess = portfolios => ({\n    type: FETCH_PORTFOLIOS_SUCCESS,\n    payload: { portfolios }\n})\n\n/**\n * FETCH_PORTFOLIOS_FAILURE action creator. This actions sets boolean loading in Redux Store to false.\n * Then sets err in Redux Store to error object obtaining from request failure.\n * \n * @param {Object} err - error object containing details about request failure.\n * @returns {{type: string, payload: Object}} = FETCH_PORTFOLIOS_FAILURE action object.\n * @member fetchPortfoliosFailure\n * @function\n */\nexport const fetchPortfoliosFailure = err => ({\n    type: FETCH_PORTFOLIOS_FAILURE,\n    payload: { err }\n})\n\n//Redux thunk allows dispatch actions that return a function. This function must take in user id\n/**\n * Action creator that returns a function, which is only possible with redux-thunk.\n * \n * The function receives the store's dispatch method, which is then used to dispatch regular\n * synchronous actions inside the function's body once the asynchronous operations have been completed.\n * \n * The function dispatches a FETCH_PORTFOLIOS_BEGIN action, then starts a GET request to obtain\n * a user's portfolio by its id. If the request succeeds, the function then dispatches a\n * FETCH_PORTFOLIOS_SUCCESS action. Otherwise, it dispatches a FETCH_PORTFOLIOS_FAILURE action.\n *\n * @param {string} id - id of specific portfolio to be fetched from mongoDB.\n * @return {Function} - a function that receives the store's dispatch method.\n * @member fetchPortfolios\n * @function\n * @requires NPM:redux-thunk\n */\nexport function fetchPortfolios(id) {\n    return dispatch => {\n        dispatch(fetchPortfoliosBegin());\n        return axios({\n            method: 'GET',\n            url: process.env.REACT_APP_REACT_APP_BACKEND + \"/portfolio\" + id,\n            withCredentials: true\n        }).then(res => res.data)\n        .then(data => {\n            //TODO PROBABLY HAVE TO CONVERT DATA INTO AN ARRAY DEPENDING ON THE RESULT\n            dispatch(fetchPortfoliosSuccess(data))\n        }).catch(err => dispatch(fetchPortfoliosFailure(err)))\n    }\n}"],"sourceRoot":""}